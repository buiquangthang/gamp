<div class="page-header">
  <%= link_to new_place_path, class: 'btn btn-primary' do %>
    <span class="glyphicon glyphicon-plus"></span>
    New Place
  <% end %>
  <h1>Listing places</h1>
  <h2>Import Busstops</h2>

  <%= form_tag import_places_path, multipart: true do %>
    <%= file_field_tag :file %>
    <%= submit_tag "Import" %>
  <% end %>
</div>

<div class="table-responsive">
  <table class="table table-striped table-bordered table-hover">
    <thead>
      <tr>
            <th>#</th>
            <th>Latitude</th>
            <th>Longtitude</th>
            <th>Name</th>
            <th>Address</th>
            <th>Title</th>
            <th></th>
        <th></th>
        <th></th>
      </tr>
    </thead>

    <tbody>
      <%= content_tag_for(:tr, @places) do |place| %>
            <td><%= place.id %></td>
            <td><%= place.latitude %></td>
            <td><%= place.longitude %></td>
            <td><%= place.name %></td>
            <td><%= place.address %></td>
            <td><%= place.title %></td>
            <td><%= link_to 'Show', place %></td>
        <td><%= link_to 'Edit', edit_place_path(place) %></td>
        <td><%= link_to 'Destroy', place, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      <% end %>
    </tbody>
  </table>
</div>

<div style='width: 800px;'>
  <div id="map" style='width: 1200px; height: 800px;'></div>
</div>

<script>

    // handler = Gmaps.build('Google');
    // handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    //   markers = handler.addMarkers(<%=raw @hash.to_json %>);
    //   handler.bounds.extendWith(markers);
    //   handler.fitMapToBounds();
    // });

    // function myFunction(lat_lng, i, poly, path){
    //   if ((i + 1) < lat_lng.length) {
    //     console.log(i);
    //     var service = new google.maps.DirectionsService();
    //     var src = lat_lng[i];
    //     var des = lat_lng[i + 1];
    //     poly.setPath(path);
    //     service.route({
    //         origin: src,
    //         destination: des,
    //         travelMode: google.maps.DirectionsTravelMode.DRIVING
    //     }, function (result, status) {
    //       console.log(status);
    //       if (status == google.maps.DirectionsStatus.OK) {
    //         for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
    //             path.push(result.routes[0].overview_path[i]);
    //           }
    //       }
    //     })
    //   }
    // }
</script>

    <script type="text/javascript">
        var markers = <%=raw @hash.to_json %>
        window.onload = function () {
            var mapOptions = {
                center: new google.maps.LatLng(markers[0].lat, markers[0].lng),
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            var map = new google.maps.Map(document.getElementById("map"), mapOptions);
            var infoWindow = new google.maps.InfoWindow();
            var lat_lng = new Array();
            var latlngbounds = new google.maps.LatLngBounds();
            for (i = 0; i < markers.length; i++) {
                var data = markers[i]
                var myLatlng = new google.maps.LatLng(data.lat, data.lng);
                lat_lng.push(myLatlng);
                var marker = new google.maps.Marker({
                    position: myLatlng,
                    map: map,
                    title: data.title
                });
                latlngbounds.extend(marker.position);
                (function (marker, data) {
                    google.maps.event.addListener(marker, "click", function (e) {
                        infoWindow.setContent(data.infowindow);
                        infoWindow.open(map, marker);
                    });
                })(marker, data);
            }
            map.setCenter(latlngbounds.getCenter());
            map.fitBounds(latlngbounds);

            //***********ROUTING****************//

            //Intialize the Path Array
            var path = new google.maps.MVCArray();

            // Intialize the Direction Service
            var service = new google.maps.DirectionsService();

            //Set the Path Stroke Color
            var poly = new google.maps.Polyline({ map: map, strokeColor: '#4986E7' });

            //Loop and Draw Path Route between the Points on MAP
            // for (var i = 0; i < lat_lng.length; i++) {
              var i=0;
              var interval = setInterval(function () {
                console.log(i);
                if ((i + 1) < lat_lng.length) {
                  var src = lat_lng[i];
                  var des = lat_lng[i + 1];

                  path.push(src);
                  poly.setPath(path);
                  service.route({
                      origin: src,
                      destination: des,
                      travelMode: google.maps.DirectionsTravelMode.DRIVING
                  }, function (result, status) {
                      console.log(status);
                      if (status == google.maps.DirectionsStatus.OK) {
                        for (var j = 0, len = result.routes[0].overview_path.length; j < len; j++) {
                            path.push(result.routes[0].overview_path[j]);
                          }
                      }
                  });
                }
              i++;
              if (i == lat_lng.length) {
                  clearInterval(interval);
                  var bounds = new google.maps.LatLngBounds();
                  map.setCenter(latlngbounds.getCenter());
                  map.fitBounds(latlngbounds);
              }
            }, 810)
        }
    </script>
